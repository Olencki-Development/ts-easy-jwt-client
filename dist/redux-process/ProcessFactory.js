"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessFactory = void 0;
const ProcessFactory_1 = require("./types/ProcessFactory");
const EasyJWTTokenManager_1 = require("../EasyJWTTokenManager");
const LoginProcess_1 = require("./processes/LoginProcess");
const RegisterProcess_1 = require("./processes/RegisterProcess");
const CurrentUserProcess_1 = require("./processes/CurrentUserProcess");
const LogoutProcess_1 = require("./processes/LogoutProcess");
const ForgotPasswordProcess_1 = require("./processes/ForgotPasswordProcess");
const UpdateForgotPasswordProcess_1 = require("./processes/UpdateForgotPasswordProcess");
class ProcessFactory {
    constructor(options) {
        this._tokenManager = new EasyJWTTokenManager_1.EasyJWTTokenManager();
        this.options = options;
    }
    getProcess(name, request) {
        const processes = {
            [ProcessFactory_1.RequestName.REGISTER]: RegisterProcess_1.getRegisterProcess(this.options.networker, request),
            [ProcessFactory_1.RequestName.LOGIN]: LoginProcess_1.getLoginProcess(this.options.networker, request),
            [ProcessFactory_1.RequestName.CURRENT_USER]: CurrentUserProcess_1.getCurrentUserProcess(this.options.networker, request),
            [ProcessFactory_1.RequestName.LOGOUT]: LogoutProcess_1.getLogoutProcess(this.options.networker, request),
            [ProcessFactory_1.RequestName.FORGOT_PASSWORD]: ForgotPasswordProcess_1.getForgotPasswordProcess(this.options.networker, request),
            [ProcessFactory_1.RequestName.UPDATE_FORGOT_PASSWORD]: UpdateForgotPasswordProcess_1.getUpdateForgotPasswordProcess(this.options.networker, request)
        };
        return processes[name];
    }
}
exports.ProcessFactory = ProcessFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvY2Vzc0ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVkdXgtcHJvY2Vzcy9Qcm9jZXNzRmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSwyREFJK0I7QUFFL0IsZ0VBQTREO0FBQzVELDJEQUEwRDtBQUMxRCxpRUFBZ0U7QUFDaEUsdUVBQXNFO0FBQ3RFLDZEQUE0RDtBQUM1RCw2RUFBNEU7QUFDNUUseUZBQXdGO0FBRXhGLE1BQWEsY0FBYztJQUt6QixZQUFZLE9BQThCO1FBRmhDLGtCQUFhLEdBQXdCLElBQUkseUNBQW1CLEVBQUUsQ0FBQTtRQUd0RSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtJQUN4QixDQUFDO0lBRUQsVUFBVSxDQUNSLElBQWlCLEVBQ2pCLE9BQXVCO1FBRXZCLE1BQU0sU0FBUyxHQU9YO1lBQ0YsQ0FBQyw0QkFBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLG9DQUFrQixDQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFDdEIsT0FBTyxDQUNSO1lBQ0QsQ0FBQyw0QkFBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLDhCQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDO1lBQ3JFLENBQUMsNEJBQVcsQ0FBQyxZQUFZLENBQUMsRUFBRSwwQ0FBcUIsQ0FDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQ3RCLE9BQU8sQ0FDUjtZQUNELENBQUMsNEJBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxnQ0FBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUM7WUFDdkUsQ0FBQyw0QkFBVyxDQUFDLGVBQWUsQ0FBQyxFQUFFLGdEQUF3QixDQUNyRCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFDdEIsT0FBTyxDQUNSO1lBQ0QsQ0FBQyw0QkFBVyxDQUFDLHNCQUFzQixDQUFDLEVBQUUsNERBQThCLENBQ2xFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUN0QixPQUFPLENBQ1I7U0FDRixDQUFBO1FBRUQsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDeEIsQ0FBQztDQUNGO0FBM0NELHdDQTJDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElSZWR1eFByb2Nlc3NDbGFzcyB9IGZyb20gJ3RzLXJlZHV4LXByb2Nlc3MvZGlzdC9pbnRlcmZhY2VzL0lSZWR1eFByb2Nlc3MnXG5pbXBvcnQgeyBJUHJvY2Vzc0ZhY3RvcnkgfSBmcm9tICcuL2ludGVyZmFjZXMvSVByb2Nlc3NGYWN0b3J5J1xuaW1wb3J0IHsgUm9vdFN0YXRlLCBBdXRoU3RhdGUgfSBmcm9tICcuL3R5cGVzL1Byb2Nlc3NHcm91cEZhY3RvcnknXG5pbXBvcnQge1xuICBQcm9jZXNzRmFjdG9yeU9wdGlvbnMsXG4gIFJlcXVlc3ROYW1lLFxuICBQcm9jZXNzUGF5bG9hZFxufSBmcm9tICcuL3R5cGVzL1Byb2Nlc3NGYWN0b3J5J1xuaW1wb3J0IHsgRWFzeUpXVFJlcXVlc3QgfSBmcm9tICcuLi9FYXN5SldUUmVxdWVzdCdcbmltcG9ydCB7IEVhc3lKV1RUb2tlbk1hbmFnZXIgfSBmcm9tICcuLi9FYXN5SldUVG9rZW5NYW5hZ2VyJ1xuaW1wb3J0IHsgZ2V0TG9naW5Qcm9jZXNzIH0gZnJvbSAnLi9wcm9jZXNzZXMvTG9naW5Qcm9jZXNzJ1xuaW1wb3J0IHsgZ2V0UmVnaXN0ZXJQcm9jZXNzIH0gZnJvbSAnLi9wcm9jZXNzZXMvUmVnaXN0ZXJQcm9jZXNzJ1xuaW1wb3J0IHsgZ2V0Q3VycmVudFVzZXJQcm9jZXNzIH0gZnJvbSAnLi9wcm9jZXNzZXMvQ3VycmVudFVzZXJQcm9jZXNzJ1xuaW1wb3J0IHsgZ2V0TG9nb3V0UHJvY2VzcyB9IGZyb20gJy4vcHJvY2Vzc2VzL0xvZ291dFByb2Nlc3MnXG5pbXBvcnQgeyBnZXRGb3Jnb3RQYXNzd29yZFByb2Nlc3MgfSBmcm9tICcuL3Byb2Nlc3Nlcy9Gb3Jnb3RQYXNzd29yZFByb2Nlc3MnXG5pbXBvcnQgeyBnZXRVcGRhdGVGb3Jnb3RQYXNzd29yZFByb2Nlc3MgfSBmcm9tICcuL3Byb2Nlc3Nlcy9VcGRhdGVGb3Jnb3RQYXNzd29yZFByb2Nlc3MnXG5cbmV4cG9ydCBjbGFzcyBQcm9jZXNzRmFjdG9yeTxHbG9iYWxTdGF0ZSBleHRlbmRzIFJvb3RTdGF0ZSA9IFJvb3RTdGF0ZT5cbiAgaW1wbGVtZW50cyBJUHJvY2Vzc0ZhY3Rvcnk8R2xvYmFsU3RhdGU+IHtcbiAgb3B0aW9uczogUHJvY2Vzc0ZhY3RvcnlPcHRpb25zXG4gIHByb3RlY3RlZCBfdG9rZW5NYW5hZ2VyOiBFYXN5SldUVG9rZW5NYW5hZ2VyID0gbmV3IEVhc3lKV1RUb2tlbk1hbmFnZXIoKVxuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFByb2Nlc3NGYWN0b3J5T3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgfVxuXG4gIGdldFByb2Nlc3MoXG4gICAgbmFtZTogUmVxdWVzdE5hbWUsXG4gICAgcmVxdWVzdDogRWFzeUpXVFJlcXVlc3RcbiAgKTogSVJlZHV4UHJvY2Vzc0NsYXNzPGFueSwgUHJvY2Vzc1BheWxvYWQgfCBudWxsLCBBdXRoU3RhdGUsIEdsb2JhbFN0YXRlPiB7XG4gICAgY29uc3QgcHJvY2Vzc2VzOiB7XG4gICAgICBbbmFtZSBpbiBSZXF1ZXN0TmFtZV06IElSZWR1eFByb2Nlc3NDbGFzczxcbiAgICAgICAgYW55LFxuICAgICAgICBQcm9jZXNzUGF5bG9hZCB8IG51bGwsXG4gICAgICAgIEF1dGhTdGF0ZSxcbiAgICAgICAgR2xvYmFsU3RhdGVcbiAgICAgID5cbiAgICB9ID0ge1xuICAgICAgW1JlcXVlc3ROYW1lLlJFR0lTVEVSXTogZ2V0UmVnaXN0ZXJQcm9jZXNzKFxuICAgICAgICB0aGlzLm9wdGlvbnMubmV0d29ya2VyLFxuICAgICAgICByZXF1ZXN0XG4gICAgICApLFxuICAgICAgW1JlcXVlc3ROYW1lLkxPR0lOXTogZ2V0TG9naW5Qcm9jZXNzKHRoaXMub3B0aW9ucy5uZXR3b3JrZXIsIHJlcXVlc3QpLFxuICAgICAgW1JlcXVlc3ROYW1lLkNVUlJFTlRfVVNFUl06IGdldEN1cnJlbnRVc2VyUHJvY2VzcyhcbiAgICAgICAgdGhpcy5vcHRpb25zLm5ldHdvcmtlcixcbiAgICAgICAgcmVxdWVzdFxuICAgICAgKSxcbiAgICAgIFtSZXF1ZXN0TmFtZS5MT0dPVVRdOiBnZXRMb2dvdXRQcm9jZXNzKHRoaXMub3B0aW9ucy5uZXR3b3JrZXIsIHJlcXVlc3QpLFxuICAgICAgW1JlcXVlc3ROYW1lLkZPUkdPVF9QQVNTV09SRF06IGdldEZvcmdvdFBhc3N3b3JkUHJvY2VzcyhcbiAgICAgICAgdGhpcy5vcHRpb25zLm5ldHdvcmtlcixcbiAgICAgICAgcmVxdWVzdFxuICAgICAgKSxcbiAgICAgIFtSZXF1ZXN0TmFtZS5VUERBVEVfRk9SR09UX1BBU1NXT1JEXTogZ2V0VXBkYXRlRm9yZ290UGFzc3dvcmRQcm9jZXNzKFxuICAgICAgICB0aGlzLm9wdGlvbnMubmV0d29ya2VyLFxuICAgICAgICByZXF1ZXN0XG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3Nlc1tuYW1lXVxuICB9XG59XG4iXX0=