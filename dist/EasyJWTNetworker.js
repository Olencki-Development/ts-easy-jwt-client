"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EasyJWTNetworker = void 0;
const EasyJWTTokenManager_1 = require("./EasyJWTTokenManager");
class EasyJWTNetworker {
    constructor(options) {
        this.options = options;
        this._tokenManager = new EasyJWTTokenManager_1.EasyJWTTokenManager();
    }
    async execute(request, data = {}) {
        let response = await request.send(data);
        if (response.status === 403) {
            const didUpdateAccessToken = await this._refreshAccessToken();
            if (didUpdateAccessToken) {
                response = await request.send(data);
            }
        }
        return response;
    }
    async _refreshAccessToken() {
        const response = await this.options.refreshRequest.send({
            refreshToken: this._tokenManager.getRefreshToken()
        });
        if (response.status === 200) {
            this._tokenManager.setAccessToken(response.data.tokens.access);
            if (response.data.tokens.refresh) {
                this._tokenManager.setRefreshToken(response.data.tokens.refresh);
            }
            return true;
        }
        return false;
    }
}
exports.EasyJWTNetworker = EasyJWTNetworker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWFzeUpXVE5ldHdvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9FYXN5SldUTmV0d29ya2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLCtEQUEyRDtBQUczRCxNQUFhLGdCQUFnQjtJQUkzQixZQUFZLE9BQWdDO1FBQzFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSx5Q0FBbUIsRUFBRSxDQUFBO0lBQ2hELENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTyxDQUNYLE9BQXdCLEVBQ3hCLE9BQTRCLEVBQUU7UUFFOUIsSUFBSSxRQUFRLEdBQUcsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3ZDLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7WUFDM0IsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFBO1lBQzdELElBQUksb0JBQW9CLEVBQUU7Z0JBQ3hCLFFBQVEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7YUFDcEM7U0FDRjtRQUVELE9BQU8sUUFBUSxDQUFBO0lBQ2pCLENBQUM7SUFFUyxLQUFLLENBQUMsbUJBQW1CO1FBQ2pDLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO1lBQ3RELFlBQVksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRTtTQUNuRCxDQUFDLENBQUE7UUFFRixJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO1lBQzNCLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBRTlELElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO2dCQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTthQUNqRTtZQUVELE9BQU8sSUFBSSxDQUFBO1NBQ1o7UUFFRCxPQUFPLEtBQUssQ0FBQTtJQUNkLENBQUM7Q0FDRjtBQXpDRCw0Q0F5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFYXN5SldUTmV0d29ya2VyT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMvRWFzeUpXVE5ldHdvcmtlcidcbmltcG9ydCB7IElFYXN5SldUTmV0d29ya2VyIH0gZnJvbSAnLi9pbnRlcmZhY2VzL0lFYXN5SldUTmV0d29ya2VyJ1xuaW1wb3J0IHsgSUVhc3lKV1RSZXF1ZXN0IH0gZnJvbSAnLi9pbnRlcmZhY2VzL0lFYXN5SldUUmVxdWVzdCdcbmltcG9ydCB7IEVhc3lKV1RUb2tlbk1hbmFnZXIgfSBmcm9tICcuL0Vhc3lKV1RUb2tlbk1hbmFnZXInXG5pbXBvcnQgeyBBeGlvc1Jlc3BvbnNlIH0gZnJvbSAnYXhpb3MnXG5cbmV4cG9ydCBjbGFzcyBFYXN5SldUTmV0d29ya2VyIGltcGxlbWVudHMgSUVhc3lKV1ROZXR3b3JrZXIge1xuICBvcHRpb25zOiBFYXN5SldUTmV0d29ya2VyT3B0aW9uc1xuICBwcm90ZWN0ZWQgX3Rva2VuTWFuYWdlcjogRWFzeUpXVFRva2VuTWFuYWdlclxuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEVhc3lKV1ROZXR3b3JrZXJPcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMuX3Rva2VuTWFuYWdlciA9IG5ldyBFYXN5SldUVG9rZW5NYW5hZ2VyKClcbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGUoXG4gICAgcmVxdWVzdDogSUVhc3lKV1RSZXF1ZXN0LFxuICAgIGRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fVxuICApOiBQcm9taXNlPEF4aW9zUmVzcG9uc2U+IHtcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0LnNlbmQoZGF0YSlcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDMpIHtcbiAgICAgIGNvbnN0IGRpZFVwZGF0ZUFjY2Vzc1Rva2VuID0gYXdhaXQgdGhpcy5fcmVmcmVzaEFjY2Vzc1Rva2VuKClcbiAgICAgIGlmIChkaWRVcGRhdGVBY2Nlc3NUb2tlbikge1xuICAgICAgICByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3Quc2VuZChkYXRhKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIF9yZWZyZXNoQWNjZXNzVG9rZW4oKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm9wdGlvbnMucmVmcmVzaFJlcXVlc3Quc2VuZCh7XG4gICAgICByZWZyZXNoVG9rZW46IHRoaXMuX3Rva2VuTWFuYWdlci5nZXRSZWZyZXNoVG9rZW4oKVxuICAgIH0pXG5cbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgICAgIHRoaXMuX3Rva2VuTWFuYWdlci5zZXRBY2Nlc3NUb2tlbihyZXNwb25zZS5kYXRhLnRva2Vucy5hY2Nlc3MpXG5cbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLnRva2Vucy5yZWZyZXNoKSB7XG4gICAgICAgIHRoaXMuX3Rva2VuTWFuYWdlci5zZXRSZWZyZXNoVG9rZW4ocmVzcG9uc2UuZGF0YS50b2tlbnMucmVmcmVzaClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuIl19